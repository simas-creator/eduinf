{
	"info": {
		"_postman_id": "33dd85ca-2a33-4462-9556-eca75b39c9e8",
		"name": "Integration testing",
		"description": "> This collection identifies test cases to ensure that various Intergalactic Bank API modules function as expected with other modules within the API and also third-party services. Check out the [End-to-End](https://www.postman.com/templates/68de712c-6b56-4e31-8b0b-627360820279/End-to-end-testing) and [Functional](https://www.postman.com/templates/f26ad070-d626-4d75-b151-7cbf1a48ed11/Functional-testing) testing collection to see other test cases for this API. \n  \n\n## 🪐 Get started\n\nThe fictional Intergalactic Bank Services team is responsible for testing the integration workflows included in this collection. You can use this collection to validate specific workflows that your team relies on. Or suggest ways to increase test coverage and make your own applications more resilient.\n\nSteps to test the Intergalactic Bank API:\n\n1. **Review tests and scripts:** [Tests](https://learning.postman.com/docs/writing-scripts/test-scripts/) are written under the Scripts tab at the folder and request levels. Different testing requirements are distributed between the folders, so be sure to read the documentation for each folder to understand what is being tested.\n    \n2. **Run tests:** To run the collection, navigate to Run Collection from the collection menu. You can also elect to run only a folder if you are interested in testing a subset of the use cases. Be aware that many of these tests contain logic that passes information between requests, and they are meant to be run in order from top to bottom. If sending the requests manually or out of order, your results may vary.\n    \n3. **Review test results:** We have included error messages for many of the test cases to help debug what may be wrong with the service. If using this collection as a pre-merge check, be sure to have all tests passing before submitting (and no, deleting the failing test cases isn’t an option 😉).\n    \n\nFor more details, check out the additional sections below, and click `View Complete Documentation` for the complete documentation. If you have questions about the folder or request, look for the documentation icon for documentation-in-context.\n\n## ⚙️Integrating with third-party APIs\n\nYou will notice that we have two different APIs involved in this test collection: our Intergalactic Bank API that handles Accounts and Transactions, and the ATM locator API run by our partners.\n\n- **Differentiating these services:** Each service is represented by a different URL variable in the request: {{baseUrl}} for our Intergalactic Bank API, and {{atmLocatorUrl}} for the ATM locator service.\n    \n- **Production vs Mocks:** We are running these tests against the production service, but if you are setting up integration tests for the first time or have strict usage limits, consider swapping the production URL for a mock server.\n    \n- **Alert to changes:** We have this collection set up on a monitor to run every day. Since we have tests for all of the properties we use in our production systems, this will alert us if any breaking changes have been pushed to this API by our partners, so we can immediately remedy the situation.\n    \n\n## 🔒Authenticating multiple APIs\n\nNote that there are two different auth schemes for the two different APIs we are testing here. As the majority of the calls belong to the Intergalactic Bank API, we have set that authorization at the collection level, and have the relevant calls set to inherit this auth from the top level. For the ATM Locator API, we specify its specific API key at the request level.\n\n## 👀 View and share run results\n\nInterested in seeing previous run results? We’re happy to share, and have a few ways for you to stay in the loop:\n\n- You can also share individual run reports from this page.\n    \n- Monitors: If you have a monitor set up for this collection, you can see historical run information by clicking on the Monitors tab on the right sidebar. You can also have the results sent to Slack or other services by setting up an integration.\n    \n\n## 🤝Increase test coverage\n\nThe Intergalactic Bank Services team wants your team to have everything they need to successfully test our services with their applications. Is your team utilizing this API in a use case not represented here? Reach us on our internal Slack by tagging @bank-services. Or add an [inline comment](https://learning.postman.com/docs/collaborating-in-postman/working-with-your-team/discussing-your-work/) to this collection with your test case suggestions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Auth Setup",
			"item": [
				{
					"name": "Generate new API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let response = pm.response.json()",
									"//save api key for use in the following folders",
									"pm.collectionVariables.set('bankApiKey', response.apiKey)",
									"",
									"//Test data type",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(response).to.be.an(\"object\", \"response is not an object\");",
									"  pm.expect(response.apiKey).to.be.a(\"string\", \"apiKey field is not a string\");",
									"});"
								]
							}
						}
					],
					"id": "6756bfbf-9e99-4ea3-889b-d1b452025535",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/auth",
						"description": "Generate a new API Key and save it as a collection variable."
					},
					"response": [
						{
							"id": "d8af10bd-2146-45b0-9fac-886041b416f8",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/v1/auth"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 10 Mar 2024 21:42:21 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "43"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"apiKey\": \"123456789\"\n}"
						}
					]
				}
			],
			"id": "2973d987-b8aa-40e1-91eb-09fcfdcf782d",
			"description": "This folder sets up the resources needed for the test folders later in the collection:\n\n1. **Generate New API Key** \\- Generates a new API key for use in the collection and saves the value as a collection variable, authorizing all requests following."
		},
		{
			"name": "Check if a Cosmic Coin ATM is open now",
			"item": [
				{
					"name": "Create Account (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let response = pm.response.json()",
									"",
									"//Test data type and save new Account ID",
									"pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(response).to.be.an(\"object\", \"Response is not an object\");",
									"    pm.expect(response.account).to.be.an(\"object\", \"Acount is not an object\");",
									"    pm.expect(response.account).to.have.property('id')",
									"    pm.expect(response.account.id).to.be.a('number')",
									"    //Set a collection variable, only if the id exists (the script will not make it here if the above tests fail.)",
									"    pm.collectionVariables.set('accountId1', response.account.id)",
									"})",
									""
								]
							}
						}
					],
					"id": "0199ee3a-83c4-41e4-9c6b-87578bd52dea",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"owner\": \"{{$randomFirstName}} {{$randomLastName}}\",\n \t\"balance\" : 500,\n    \"currency\" : \"COSMIC_COINS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/accounts",
						"description": "Here, we are creating a new account using the Cosmic Coins currency. We are storing the newly created account's id as a collection variable for use in the next request."
					},
					"response": [
						{
							"id": "5e2e4344-7289-4c76-8795-6e35e7e7672a",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"owner\": \"{{$randomFirstName}} {{$randomLastName}}\",\n \t\"balance\" : 500,\n    \"currency\" : \"COSMIC_COINS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/accounts"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 11 Mar 2024 01:01:19 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"account\": {\n        \"id\": 144\n    }\n}"
						}
					]
				},
				{
					"name": "Get account & save preferred currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let response = pm.response.json()",
									"//save currency from response so we can find a matching ATM in the next request",
									"pm.collectionVariables.set('currency', response.account.currency)",
									"",
									"//Test data type",
									"pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(response).to.be.an(\"object\", \"Response is not an object\");",
									"    pm.expect(response.account).to.be.an(\"object\", \"Acount is not an object\");",
									"    pm.expect(response.account).to.have.all.keys('id', 'owner', 'balance', 'currency', 'createdAt');",
									"    pm.expect(response.account.id).to.be.a('number', \"id is not an number\")",
									"    pm.expect(response.account.owner).to.be.a('string', \"owner is not an string\")",
									"    pm.expect(response.account.balance).to.be.a('number', \"balance is not an number\")",
									"    pm.expect(response.account.currency).to.be.a('string', \"currency is not a string\")",
									"    pm.expect(response.account.currency).to.be.oneOf([\"COSMIC_COINS\", \"GALAXY_GOLD\", \"MOON_BUCKS\"], \"Invalid currency type\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"id": "832378be-10a7-4e82-abe2-be588a30a4fc",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/accounts/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								":id"
							],
							"variable": [
								{
									"id": "5310ad6d-c72c-4af9-8dfc-bcee9bc3554c",
									"key": "id",
									"value": "{{accountId1}}"
								}
							]
						},
						"description": "Gets the account that was just created and saves the preferred currency."
					},
					"response": [
						{
							"id": "72ef0e9d-5a72-4527-b8e8-c011bc0762ac",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{accountId1}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 11 Mar 2024 01:01:41 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "123"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"account\": {\n        \"id\": 144,\n        \"owner\": \"Rubie Emard\",\n        \"balance\": 500,\n        \"currency\": \"COSMIC_COINS\",\n        \"createdAt\": \"2024-03-11T01:01:19.000Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Check if any Cosmic Coin ATMs are open",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let response = pm.response.json()",
									"",
									"//get all locations that take cosmic coins into one list",
									"let cosmicCoinLocations = response.space_currencies.find(e => e.currency_name === 'COSMIC_COINS')",
									"pm.test(\"At least one ATM on the list accepts cosmic coins \", function(){",
									"    pm.expect(cosmicCoinLocations.atm_locations.length).to.be.gte(1)",
									"})",
									"",
									"//of these cosmic coin locations, filter for all of the locations open now",
									"let locationsOpenNow = cosmicCoinLocations.atm_locations.filter(e => e.isOpenNow === true)",
									"pm.test(\"At least one Cosmic Coin ATM is open now\", function(){",
									"    //is the number of entries in our array of ATMs open now greater than or equal to (gte) 1?",
									"    pm.expect(locationsOpenNow.length).to.be.gte(1)",
									"})",
									"",
									"//Test data type",
									"pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(response).to.be.an(\"object\", \"Response is not an object\");",
									"    pm.expect(response.space_currencies).to.be.an(\"array\", \"space_currencies is not an array\");",
									"    pm.expect(response.space_currencies[0]).to.have.all.keys('currency_code', 'currency_name', 'atm_locations');",
									"    pm.expect(response.space_currencies[0].currency_name).to.be.a('string', \"currency_name is not a string\")",
									"});"
								]
							}
						}
					],
					"id": "1de591fa-830e-4008-b9e9-5876720d3f54",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": {
								"key": "api-key",
								"value": "{{atmLocatorApiKey}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{atmLocatorUrl}}/api/v1/locations",
						"description": "Queries the ATM Locator API and checks that:\n\n1. At least one ATM on the list accepts Cosmic Coins\n    \n2. At least one of these locations is open now"
					},
					"response": [
						{
							"id": "11169249-0a9b-4aa9-bb11-e540b431482a",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{atmLocatorUrl}}/api/v1/locations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 11 Mar 2024 01:01:50 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1453"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"space_currencies\": [\n        {\n            \"currency_code\": \"CC\",\n            \"currency_name\": \"COSMIC_COINS\",\n            \"atm_locations\": [\n                {\n                    \"planet\": \"Mercury\",\n                    \"location\": \"Solar Banking Tower, Mercury Base\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": false,\n                    \"isOpenNow\": true\n                },\n                {\n                    \"planet\": \"Mars\",\n                    \"location\": \"Red Planet Financial Hub, Olympus Mons\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": false\n                },\n                {\n                    \"planet\": \"Jupiter\",\n                    \"location\": \"Jovian Capital Bank, Great Red Spot\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": true\n                }\n            ]\n        },\n        {\n            \"currency_code\": \"MB\",\n            \"currency_name\": \"MOON_BUCKS\",\n            \"atm_locations\": [\n                {\n                    \"planet\": \"Titan\",\n                    \"location\": \"Titanian Financial Center, Kraken Mare\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": false,\n                    \"isOpenNow\": true\n                },\n                {\n                    \"planet\": \"Europa\",\n                    \"location\": \"Europan Exchange, Conamara Chaos\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": false\n                },\n                {\n                    \"planet\": \"Enceladus\",\n                    \"location\": \"Ice Castle Bank, Tiger Stripes\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": true\n                }\n            ]\n        },\n        {\n            \"currency_code\": \"GG\",\n            \"currency_name\": \"GALAXY_GOLD\",\n            \"atm_locations\": [\n                {\n                    \"planet\": \"Venus\",\n                    \"location\": \"Venusian Treasury, Aphrodite Terra\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": false,\n                    \"isOpenNow\": true\n                },\n                {\n                    \"planet\": \"Saturn\",\n                    \"location\": \"Saturnian Financial Plaza, Rings of Saturn\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": false\n                },\n                {\n                    \"planet\": \"Uranus\",\n                    \"location\": \"Uranian Credit Union, Miranda\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": true\n                }\n            ]\n        }\n    ]\n}"
						}
					]
				}
			],
			"id": "59925d9c-7d42-45ab-b90d-16dd7f157a58",
			"description": "Here we are using the Intergalactic Bank API and ATM locator API to check if any suitable ATMs are open for a newly created account.\n\nWe are checking to see if the currency of the newly created account matches the currencies accepted by any open ATMs."
		},
		{
			"name": "Check if Cosmic Coins can be deposited",
			"item": [
				{
					"name": "Create Account (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let response = pm.response.json()",
									"//Test data type and save new Account ID",
									"pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(response).to.be.an(\"object\", \"Response is not an object\");",
									"    pm.expect(response.account).to.be.an(\"object\", \"Acount is not an object\");",
									"    pm.expect(response.account).to.have.property('id')",
									"    pm.expect(response.account.id).to.be.a('number')",
									"    //Set a collection variable, only if the id exists (the script will not make it here if the above tests fail.)",
									"    pm.collectionVariables.set('accountId2', response.account.id)",
									"})",
									""
								]
							}
						}
					],
					"id": "54c00cca-8d07-40cb-bef5-bae191501ade",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"owner\": \"{{$randomFirstName}} {{$randomLastName}}\",\n \t\"balance\" : 0,\n    \"currency\" : \"COSMIC_COINS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/accounts",
						"description": "Here, we are creating a new account with the preferred currency as Cosmic Coins. We are storing the newly created account's id as a collection variable for use in the next request."
					},
					"response": [
						{
							"id": "e7455d25-b28f-41a6-b033-09f8caa3c950",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"owner\": \"{{$randomFirstName}} {{$randomLastName}}\",\n \t\"balance\" : 0,\n    \"currency\" : \"COSMIC_COINS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/accounts"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 11 Mar 2024 01:01:58 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"account\": {\n        \"id\": 145\n    }\n}"
						}
					]
				},
				{
					"name": "Check if ATM accepts Cosmic Coins",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let response = pm.response.json()",
									"",
									"//get all locations that take cosmic coins into one list",
									"let cosmicCoinLocations = response.space_currencies.find(e => e.currency_name === 'COSMIC_COINS')",
									"pm.test(\"At least one ATM on the list accepts cosmic coins \", function(){",
									"    //is the number of entries in our array of CC ATM locationss open now greater than or equal to (gte) 1:",
									"    pm.expect(cosmicCoinLocations.atm_locations.length).to.be.gte(1)",
									"})",
									"",
									"//of these locations, see if at least one accepts transfers",
									"let transfersAccepted = cosmicCoinLocations.atm_locations.filter(e => e.transfersAccepted === true)",
									"pm.test(\"At least one Cosmic Coin ATM accepts transfers\", function(){",
									"    //is the number of entries in our array of ATMs accepting transfers greater than or equal to (gte) 1:",
									"    pm.expect(transfersAccepted.length).to.be.gte(1)",
									"})",
									"",
									"//Test data type",
									"pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(response).to.be.an(\"object\", \"Response is not an object\");",
									"    pm.expect(response.space_currencies).to.be.an(\"array\", \"space_currencies is not an array\");",
									"    pm.expect(response.space_currencies[0]).to.have.all.keys('currency_code', 'currency_name', 'atm_locations');",
									"    pm.expect(response.space_currencies[0].currency_name).to.be.a('string', \"currency_name is not a string\")",
									"});"
								]
							}
						}
					],
					"id": "b77a9763-02b9-4a35-8fa2-b50216dc8ef3",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": {
								"key": "api-key",
								"value": "{{atmLocatorApiKey}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{atmLocatorUrl}}/api/v1/locations",
						"description": "Queries the ATM Locator API and checks that:\n\n1. At least one ATM on the list accepts Cosmic Coins\n    \n2. At least one of these locations accepts transfers"
					},
					"response": [
						{
							"id": "360bdf6f-07d8-49fe-b6aa-4532465183fa",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{atmLocatorUrl}}/api/v1/locations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 11 Mar 2024 01:02:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1453"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"space_currencies\": [\n        {\n            \"currency_code\": \"CC\",\n            \"currency_name\": \"COSMIC_COINS\",\n            \"atm_locations\": [\n                {\n                    \"planet\": \"Mercury\",\n                    \"location\": \"Solar Banking Tower, Mercury Base\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": false,\n                    \"isOpenNow\": true\n                },\n                {\n                    \"planet\": \"Mars\",\n                    \"location\": \"Red Planet Financial Hub, Olympus Mons\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": false\n                },\n                {\n                    \"planet\": \"Jupiter\",\n                    \"location\": \"Jovian Capital Bank, Great Red Spot\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": true\n                }\n            ]\n        },\n        {\n            \"currency_code\": \"MB\",\n            \"currency_name\": \"MOON_BUCKS\",\n            \"atm_locations\": [\n                {\n                    \"planet\": \"Titan\",\n                    \"location\": \"Titanian Financial Center, Kraken Mare\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": false,\n                    \"isOpenNow\": true\n                },\n                {\n                    \"planet\": \"Europa\",\n                    \"location\": \"Europan Exchange, Conamara Chaos\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": false\n                },\n                {\n                    \"planet\": \"Enceladus\",\n                    \"location\": \"Ice Castle Bank, Tiger Stripes\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": true\n                }\n            ]\n        },\n        {\n            \"currency_code\": \"GG\",\n            \"currency_name\": \"GALAXY_GOLD\",\n            \"atm_locations\": [\n                {\n                    \"planet\": \"Venus\",\n                    \"location\": \"Venusian Treasury, Aphrodite Terra\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": false,\n                    \"isOpenNow\": true\n                },\n                {\n                    \"planet\": \"Saturn\",\n                    \"location\": \"Saturnian Financial Plaza, Rings of Saturn\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": false\n                },\n                {\n                    \"planet\": \"Uranus\",\n                    \"location\": \"Uranian Credit Union, Miranda\",\n                    \"transfersAccepted\": true,\n                    \"depositsAccepted\": true,\n                    \"isOpenNow\": true\n                }\n            ]\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Create transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Should display a successful transaction message\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(response).to.be.an(\"object\", \"Response is not an object\");",
									"    pm.expect(response.success).to.be.a(\"boolean\", \"Success is not a boolean\");",
									"    pm.expect(response.transaction).to.be.an(\"object\", \"Transaction is not an object\");",
									"    pm.expect(response.transaction.id).to.be.a('number')",
									"})",
									""
								]
							}
						}
					],
					"id": "54704904-0740-4ace-bdb5-7fff0f4331bd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "api-key",
								"value": "1234"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fromAccountId\": {{accountId1}},\n    \"toAccountId\": {{accountId2}},\n    \"amount\": 20,\n    \"currency\": \"COSMIC_COINS\"\n}"
						},
						"url": "{{baseUrl}}/api/v1/transactions",
						"description": "Once we have confirmed that at least one ATM location accepts transfers in our preferred currency, we will generate a new transaction."
					},
					"response": [
						{
							"id": "95aca6d9-08d0-4937-bdd4-73b0c16d8c86",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "1234"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fromAccountId\": {{accountId1}},\n    \"toAccountId\": {{accountId2}},\n    \"amount\": 20,\n    \"currency\": \"COSMIC_COINS\"\n}"
								},
								"url": "{{baseUrl}}/api/v1/transactions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 11 Mar 2024 01:02:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "40"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"success\": true,\n    \"transaction\": {\n        \"id\": 64\n    }\n}"
						}
					]
				}
			],
			"id": "5973d4ef-ef90-44a0-b2d5-1d3bfe3b2128",
			"description": "Here we are using the Intergalactic Bank API and ATM locator API to check if any suitable ATMs are open and accept transfers for a newly created account's preferred currency.\n\nWe are checking to see if the currency of the newly created account matches the currencies accepted for transfers by any open ATMs."
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Account 1",
					"id": "32341723-4f83-4465-ac35-f4a10675cc9d",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/accounts/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								":id"
							],
							"variable": [
								{
									"id": "fcb8c2e8-693c-462a-bbcc-c9d8f379e01d",
									"key": "id",
									"value": "{{accountId1}}"
								}
							]
						},
						"description": "Delete Account 1 to clean up our work."
					},
					"response": [
						{
							"id": "272f527c-f4e6-4490-be63-dcac93818063",
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://template.postman-echo.com/api/v1/accounts/:id",
									"protocol": "https",
									"host": [
										"template",
										"postman-echo",
										"com"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "4e4a5f87-ba48-4dfe-a9cc-27f41c550ee3",
							"name": "Not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "15"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 17 Feb 2024 13:18:51 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "63"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"name\": \"instanceNotFound\",\n    \"message\": \"Account does not exist.\"\n}"
						},
						{
							"id": "fa919e23-98dc-4e3d-81bc-96b497a82a4b",
							"name": "Forbidden",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "22"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 17 Feb 2024 13:21:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "95"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"name\": \"invalidAuth\",\n    \"message\": \"Please provide a valid API key in the header of the request.\"\n}"
						}
					]
				},
				{
					"name": "Delete Account 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.unset(\"accountId1\")",
									"pm.collectionVariables.unset(\"accountId2\")",
									"pm.collectionVariables.unset(\"currency\")",
									"",
									""
								]
							}
						}
					],
					"id": "051dbf1e-a110-49c6-a493-5f8c62de9598",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/accounts/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								":id"
							],
							"variable": [
								{
									"id": "fd1b3876-d4c8-4050-94ec-6c5d2c3f4a81",
									"key": "id",
									"value": "{{accountId2}}"
								}
							]
						},
						"description": "Delete Account 2 and the collection variables created during this collection run."
					},
					"response": [
						{
							"id": "746fadf4-8782-45bf-8986-2a8bb1c3500a",
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://template.postman-echo.com/api/v1/accounts/:id",
									"protocol": "https",
									"host": [
										"template",
										"postman-echo",
										"com"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "7e7d0e8e-9e32-42d4-b9fa-74a675f6b498",
							"name": "Not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "15"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 17 Feb 2024 13:18:51 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "63"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"name\": \"instanceNotFound\",\n    \"message\": \"Account does not exist.\"\n}"
						},
						{
							"id": "c25070d0-593d-467b-87ac-fa77aa52b799",
							"name": "Forbidden",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "22"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 17 Feb 2024 13:21:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "95"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"name\": \"invalidAuth\",\n    \"message\": \"Please provide a valid API key in the header of the request.\"\n}"
						}
					]
				}
			],
			"id": "2e6a5f25-255b-438f-b1f6-150ea1168a02",
			"description": "These requests will clean up the accounts and variables created during the run of this collection so that the collection is ready to run again."
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"value": "{{bankApiKey}}",
			"key": "api-key"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "51da9fe8-2130-4169-866b-027d7d0accd8",
			"key": "baseUrl",
			"value": "https://template.postman-echo.com",
			"type": "string"
		},
		{
			"id": "23a296de-63af-41c5-96f8-50b9207a55b8",
			"key": "atmLocatorUrl",
			"value": "https://template.postman-echo.com"
		},
		{
			"id": "b497420f-c448-4a9d-92b6-c6d369c754cf",
			"key": "bankApiKey",
			"value": "KeBnYLS0.MYvbswLr73CVJpSUrlF21"
		},
		{
			"id": "9ab6a589-db53-47af-a52a-dfb6a06f2a2c",
			"key": "atmLocatorApiKey",
			"value": "12345",
			"type": "string"
		}
	]
}